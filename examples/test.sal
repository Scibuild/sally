
fn dup : int -- int int {
  -> x
  x x
}
fn swap : int int -- int int {
  -> x
  -> y
  x y
}


fn factorial : int -- int {
  -> n
  if n 0 int/eq; {
    1
  } else {
    n 1 - factorial;
    n *
  }
}

fn drop : int -- {
  -> _
}

fn factorial' : int -- int {
  -> n
  1
  while n 0 int/eq; not; {
    n *
    n 1 - -> n
  }
}

fn count-a-lot : -- {
  1
  while dup; 100000000 int/eq; not; {
    1 +
  }
  drop;
}

fn dup2 : $a $b -- $a $b $a $b {
  -> x -> y
  y x y x
}

fn drop2 : $a $b -- {
  -> _a -> _b
}

fn loop : int int -- int int bool {
  dup2; if > { 1 + true } else { false }
}

fn end-loop : int int -- { drop2; }

fn stars : int -- {
  0 while loop; { "*" print; } end-loop;
}

fn over : $a $b -- $a $b $a {
  -> x -> y y x y
}

fn factorial'' : int -- int {
  1 -> result
  1 while loop; { dup; result * -> result } end-loop;
  result
}

fn ln : -- {
  "\n" print;
}

fn main : -- {
#  1 dup; + 
#  4 2 /
#  swap;
#  /
#  print-int; print-newline;

  20 factorial; print-int; ln;
  20 factorial'; print-int; ln;
  20 factorial''; print-int; ln;

  20 stars; ln;
}
